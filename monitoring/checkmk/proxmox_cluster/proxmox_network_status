#!/bin/bash
#
# Check_MK Local Check: Proxmox Network Status
# File: /usr/lib/check_mk_agent/local/proxmox_network_status
#
# Monitors network bridges, bonds, VLANs and connectivity
# Author: somnium78
# Version: 1.0.0
# Date: 2025-08-30
#

check_proxmox_network_status() {
    local status=0
    local state="OK"
    local messages=()
    local perf_data=""

    # Network counters
    local bridges_total=0
    local bridges_up=0
    local bonds_total=0
    local bonds_up=0
    local interfaces_total=0
    local interfaces_up=0
    local vlans_total=0

    # Check network bridges
    if [ -d /sys/class/net ]; then
        for bridge in /sys/class/net/vmbr*; do
            if [ -d "$bridge" ]; then
                bridge_name=$(basename "$bridge")
                bridges_total=$((bridges_total + 1))

                # Check bridge status
                if [ -f "$bridge/operstate" ]; then
                    bridge_state=$(cat "$bridge/operstate" 2>/dev/null)
                    if [ "$bridge_state" = "up" ]; then
                        bridges_up=$((bridges_up + 1))
                    else
                        messages+=("WARNING: Bridge $bridge_name is $bridge_state")
                        if [ $status -lt 1 ]; then status=1; fi
                    fi
                fi

                # Check bridge members
                if [ -d "$bridge/brif" ]; then
                    member_count=$(ls "$bridge/brif" 2>/dev/null | wc -l)
                    if [ $member_count -eq 0 ]; then
                        messages+=("WARNING: Bridge $bridge_name has no members")
                        if [ $status -lt 1 ]; then status=1; fi
                    fi
                fi
            fi
        done
    fi

    # Check bond interfaces
    for bond in /sys/class/net/bond*; do
        if [ -d "$bond" ]; then
            bond_name=$(basename "$bond")
            bonds_total=$((bonds_total + 1))

            # Check bond status
            if [ -f "$bond/operstate" ]; then
                bond_state=$(cat "$bond/operstate" 2>/dev/null)
                if [ "$bond_state" = "up" ]; then
                    bonds_up=$((bonds_up + 1))
                else
                    messages+=("CRITICAL: Bond $bond_name is $bond_state")
                    status=2
                fi
            fi

            # Check bond slaves
            if [ -f "$bond/bonding/slaves" ]; then
                slaves=$(cat "$bond/bonding/slaves" 2>/dev/null)
                if [ -z "$slaves" ]; then
                    messages+=("CRITICAL: Bond $bond_name has no active slaves")
                    status=2
                fi
            fi
        fi
    done

    # Check physical interfaces
    for iface in /sys/class/net/e*; do
        if [ -d "$iface" ] && [ ! -L "$iface/master" ]; then
            iface_name=$(basename "$iface")
            # Skip virtual interfaces
            if [[ ! "$iface_name" =~ ^(veth|tap|vmbr) ]]; then
                interfaces_total=$((interfaces_total + 1))

                if [ -f "$iface/operstate" ]; then
                    iface_state=$(cat "$iface/operstate" 2>/dev/null)
                    if [ "$iface_state" = "up" ]; then
                        interfaces_up=$((interfaces_up + 1))
                    fi
                fi

                # Check for link errors
                if [ -f "$iface/statistics/rx_errors" ] && [ -f "$iface/statistics/tx_errors" ]; then
                    rx_errors=$(cat "$iface/statistics/rx_errors" 2>/dev/null || echo 0)
                    tx_errors=$(cat "$iface/statistics/tx_errors" 2>/dev/null || echo 0)
                    total_errors=$((rx_errors + tx_errors))

                    if [ $total_errors -gt 100 ]; then
                        messages+=("WARNING: Interface $iface_name has $total_errors errors")
                        if [ $status -lt 1 ]; then status=1; fi
                    fi
                fi
            fi
        fi
    done

    # Check VLAN interfaces
    vlans_total=$(ip link show type vlan 2>/dev/null | grep -c "vlan")

    # Test connectivity to other cluster nodes
    local node_connectivity=0
    local total_nodes=0
    if [ -f /etc/pve/corosync.conf ]; then
        cluster_ips=$(grep -o 'ring0_addr: [0-9.]*' /etc/pve/corosync.conf 2>/dev/null | awk '{print $2}')
        current_ip=$(hostname -I | awk '{print $1}')

        for ip in $cluster_ips; do
            if [ "$ip" != "$current_ip" ]; then
                total_nodes=$((total_nodes + 1))
                if ping -c 1 -W 2 "$ip" >/dev/null 2>&1; then
                    node_connectivity=$((node_connectivity + 1))
                else
                    messages+=("WARNING: Cannot reach cluster node $ip")
                    if [ $status -lt 1 ]; then status=1; fi
                fi
            fi
        done
    fi

    # Build performance data
    perf_data="bridges_total=$bridges_total;bridges_up=$bridges_up;bonds_total=$bonds_total;bonds_up=$bonds_up;interfaces_total=$interfaces_total;interfaces_up=$interfaces_up;vlans_total=$vlans_total;node_connectivity=$node_connectivity;total_nodes=$total_nodes"

    # Determine final status
    case $status in
        0) state="OK" ;;
        1) state="WARNING" ;;
        2) state="CRITICAL" ;;
    esac

    # Build message
    if [ ${#messages[@]} -eq 0 ]; then
        message="Network OK: $bridges_up/$bridges_total bridges, $bonds_up/$bonds_total bonds, $interfaces_up/$interfaces_total interfaces, $vlans_total VLANs"
        if [ $total_nodes -gt 0 ]; then
            message="$message, $node_connectivity/$total_nodes nodes reachable"
        fi
    else
        message=$(IFS=", "; echo "${messages[*]}")
    fi

    echo "$status Proxmox_Network_Status $perf_data $state: $message"
}

check_proxmox_network_status
