#!/bin/bash
#
# Check_MK Local Check: Proxmox Security Updates
# File: /usr/lib/check_mk_agent/local/proxmox_security_updates
#
# Monitors security updates, SSL certificates, and security status
# Author: somnium78
# Version: 1.0.0
# Date: 2025-08-30
#

check_proxmox_security_updates() {
    local status=0
    local state="OK"
    local messages=()
    local perf_data=""

    # Security counters
    local security_updates=0
    local total_updates=0
    local cert_days_remaining=999
    local failed_logins=0
    local firewall_enabled=0

    # Check for available updates
    if command -v apt >/dev/null 2>&1; then
        # Update package cache if older than 6 hours
        if [ ! -f /var/cache/apt/pkgcache.bin ] || [ $(find /var/cache/apt/pkgcache.bin -mmin +360 2>/dev/null | wc -l) -gt 0 ]; then
            apt update >/dev/null 2>&1
        fi

        # Check for security updates
        security_updates=$(apt list --upgradable 2>/dev/null | grep -c "security\|Debian-Security")
        total_updates=$(apt list --upgradable 2>/dev/null | grep -c "upgradable")

        if [ $security_updates -gt 0 ]; then
            if [ $security_updates -gt 5 ]; then
                messages+=("CRITICAL: $security_updates security updates available")
                status=2
            else
                messages+=("WARNING: $security_updates security updates available")
                if [ $status -lt 1 ]; then status=1; fi
            fi
        fi

        # Check for kernel updates requiring reboot
        if [ -f /var/run/reboot-required ]; then
            messages+=("WARNING: System reboot required for updates")
            if [ $status -lt 1 ]; then status=1; fi
        fi
    fi

    # Check SSL certificate expiry
    if [ -f /etc/pve/local/pve-ssl.pem ]; then
        cert_expiry=$(openssl x509 -in /etc/pve/local/pve-ssl.pem -noout -enddate 2>/dev/null | cut -d= -f2)
        if [ -n "$cert_expiry" ]; then
            cert_expiry_epoch=$(date -d "$cert_expiry" +%s 2>/dev/null)
            current_epoch=$(date +%s)
            if [ -n "$cert_expiry_epoch" ]; then
                cert_days_remaining=$(( (cert_expiry_epoch - current_epoch) / 86400 ))

                if [ $cert_days_remaining -lt 7 ]; then
                    messages+=("CRITICAL: SSL certificate expires in $cert_days_remaining days")
                    status=2
                elif [ $cert_days_remaining -lt 30 ]; then
                    messages+=("WARNING: SSL certificate expires in $cert_days_remaining days")
                    if [ $status -lt 1 ]; then status=1; fi
                fi
            fi
        fi
    fi

    # Check for failed login attempts (last 24 hours)
    if [ -f /var/log/auth.log ]; then
        failed_logins=$(grep "$(date --date='1 day ago' '+%b %d')\|$(date '+%b %d')" /var/log/auth.log 2>/dev/null | grep -c "authentication failure\|Failed password")

        if [ $failed_logins -gt 50 ]; then
            messages+=("WARNING: $failed_logins failed login attempts in last 24h")
            if [ $status -lt 1 ]; then status=1; fi
        fi
    fi

    # Check Proxmox firewall status
    if command -v pve-firewall >/dev/null 2>&1; then
        fw_status=$(pve-firewall status 2>/dev/null)
        if echo "$fw_status" | grep -q "Status: enabled"; then
            firewall_enabled=1
        else
            messages+=("WARNING: Proxmox firewall is disabled")
            if [ $status -lt 1 ]; then status=1; fi
        fi
    fi

    # Check for suspicious processes
    suspicious_procs=0
    if command -v ps >/dev/null 2>&1; then
        # Look for common malware/mining processes
        suspicious_patterns="cryptonight|xmrig|minerd|cgminer|bfgminer"
        suspicious_procs=$(ps aux | grep -E "$suspicious_patterns" | grep -v grep | wc -l)

        if [ $suspicious_procs -gt 0 ]; then
            messages+=("CRITICAL: $suspicious_procs suspicious processes detected")
            status=2
        fi
    fi

    # Check system integrity (basic)
    local integrity_issues=0

    # Check if important system files are present and have correct permissions
    critical_files="/etc/passwd /etc/shadow /etc/sudoers"
    for file in $critical_files; do
        if [ ! -f "$file" ]; then
            integrity_issues=$((integrity_issues + 1))
            messages+=("CRITICAL: Critical system file $file missing")
            status=2
        fi
    done

    # Check for unusual SUID files in common locations
    if command -v find >/dev/null 2>&1; then
        unusual_suid=$(find /tmp /var/tmp /dev/shm -type f -perm -4000 2>/dev/null | wc -l)
        if [ $unusual_suid -gt 0 ]; then
            messages+=("WARNING: $unusual_suid unusual SUID files in temp directories")
            if [ $status -lt 1 ]; then status=1; fi
        fi
    fi

    # Build performance data
    perf_data="security_updates=$security_updates;total_updates=$total_updates;cert_days_remaining=$cert_days_remaining;failed_logins=$failed_logins;firewall_enabled=$firewall_enabled;suspicious_procs=$suspicious_procs;integrity_issues=$integrity_issues"

    # Determine final status
    case $status in
        0) state="OK" ;;
        1) state="WARNING" ;;
        2) state="CRITICAL" ;;
    esac

    # Build message
    if [ ${#messages[@]} -eq 0 ]; then
        message="Security OK: $security_updates security updates, SSL cert valid for $cert_days_remaining days"
        if [ $firewall_enabled -eq 1 ]; then
            message="$message, firewall enabled"
        fi
    else
        message=$(IFS=", "; echo "${messages[*]}")
    fi

    echo "$status Proxmox_Security_Updates $perf_data $state: $message"
}

check_proxmox_security_updates
