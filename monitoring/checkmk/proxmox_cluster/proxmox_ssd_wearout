#!/bin/bash
#
# Check_MK Local Check: SSD/NVMe Wear-out Monitoring (per device)
# File: /usr/lib/check_mk_agent/local/ssd_wearout
#
# Monitors SSD/NVMe wear indicators - outputs one check per device
# Author: somnium78
# Version: 2.0.0
# Date: 2025-09-05
#

check_ssd_wearout() {
    if ! command -v smartctl >/dev/null 2>&1; then
        echo "2 SSD_Wearout - CRITICAL: smartctl command not found (install smartmontools)"
        return
    fi

    # Find all NVMe and SSD devices (exclude zd devices)
    nvme_devices=$(ls /dev/nvme?n? 2>/dev/null)
    ssd_devices=$(lsblk -d -n -o NAME,ROTA | grep " 0$" | awk '{print "/dev/"$1}' | grep -v nvme | grep -v zd)

    all_devices="$nvme_devices $ssd_devices"

    if [ -z "$all_devices" ]; then
        echo "1 SSD_Wearout - WARNING: No SSD/NVMe devices found"
        return
    fi

    # Process each device individually
    for device in $all_devices; do
        if [ -b "$device" ]; then
            device_name=$(basename "$device")

            # Get SMART attributes
            smart_output=$(smartctl -A "$device" 2>/dev/null)
            smart_info=$(smartctl -i "$device" 2>/dev/null)

            if [ $? -eq 0 ]; then
                # Get device model and capacity
                model=$(echo "$smart_info" | grep "Device Model\|Model Number" | cut -d: -f2 | xargs)
                capacity=$(echo "$smart_info" | grep "User Capacity\|Namespace.*Size" | head -1 | grep -o "[0-9,.]* [KMGT]B" | head -1)

                # Check for NVMe specific attributes
                if echo "$device" | grep -q nvme; then
                    # NVMe wear indicators
                    wear_level=$(echo "$smart_output" | grep -i "Percentage Used" | awk '{print $3}' | sed 's/%//')
                    data_written=$(echo "$smart_output" | grep -i "Data Units Written" | awk '{print $4}')
                    power_cycles=$(echo "$smart_output" | grep -i "Power Cycles" | awk '{print $3}')
                    power_on_hours=$(echo "$smart_output" | grep -i "Power On Hours" | awk '{print $3}' | sed 's/,//g')

                    if [ -n "$wear_level" ] && [ "$wear_level" -gt 0 ]; then
                        # Determine status based on wear level
                        if [ "$wear_level" -ge 90 ]; then
                            status=2
                            state="CRITICAL"
                        elif [ "$wear_level" -ge 80 ]; then
                            status=1
                            state="WARNING"
                        else
                            status=0
                            state="OK"
                        fi

                        # Build detailed message
                        message="NVMe ${device_name}: ${wear_level}% worn"
                        if [ -n "$model" ]; then
                            message="$message ($model"
                            if [ -n "$capacity" ]; then
                                message="$message, $capacity"
                            fi
                            message="$message)"
                        fi

                        # Add additional metrics
                        additional_info=""
                        if [ -n "$data_written" ]; then
                            additional_info="$additional_info, ${data_written} data units written"
                        fi
                        if [ -n "$power_on_hours" ]; then
                            additional_info="$additional_info, ${power_on_hours}h runtime"
                        fi
                        if [ -n "$power_cycles" ]; then
                            additional_info="$additional_info, ${power_cycles} power cycles"
                        fi

                        if [ -n "$additional_info" ]; then
                            message="$message$additional_info"
                        fi

                        echo "$status SSD_Wearout_${device_name} wear_percent=$wear_level;data_written=${data_written:-0};power_cycles=${power_cycles:-0};power_on_hours=${power_on_hours:-0} $state: $message"
                    else
                        echo "0 SSD_Wearout_${device_name} wear_percent=0;data_written=0;power_cycles=0;power_on_hours=0 OK: NVMe ${device_name}: No wear data available ($model)"
                    fi
                else
                    # SATA SSD wear indicators
                    wear_leveling=$(echo "$smart_output" | grep -i "Wear_Leveling_Count" | awk '{print $4}')
                    program_fail=$(echo "$smart_output" | grep -i "Program_Fail_Count" | awk '{print $4}')
                    erase_fail=$(echo "$smart_output" | grep -i "Erase_Fail_Count" | awk '{print $4}')
                    power_on_hours=$(echo "$smart_output" | grep -i "Power_On_Hours" | awk '{print $4}')
                    power_cycles=$(echo "$smart_output" | grep -i "Power_Cycle_Count" | awk '{print $4}')

                    # SSD life left (some drives report this)
                    life_left=$(echo "$smart_output" | grep -iE "SSD_Life_Left|Remaining_Lifetime|Media_Wearout_Indicator" | awk '{print $4}' | head -1)

                    status=0
                    state="OK"
                    wear_percent=0

                    if [ -n "$life_left" ] && [ "$life_left" -gt 0 ] && [ "$life_left" -le 100 ]; then
                        wear_percent=$((100 - life_left))

                        if [ "$life_left" -le 10 ]; then
                            status=2
                            state="CRITICAL"
                        elif [ "$life_left" -le 20 ]; then
                            status=1
                            state="WARNING"
                        fi

                        message="SSD ${device_name}: ${wear_percent}% worn (${life_left}% life left)"
                    elif [ -n "$program_fail" ] && [ "$program_fail" -gt 0 ]; then
                        status=1
                        state="WARNING"
                        message="SSD ${device_name}: Program failures detected ($program_fail)"
                    elif [ -n "$erase_fail" ] && [ "$erase_fail" -gt 0 ]; then
                        status=2
                        state="CRITICAL"
                        message="SSD ${device_name}: Erase failures detected ($erase_fail)"
                    else
                        message="SSD ${device_name}: Healthy"
                    fi

                    # Add model info
                    if [ -n "$model" ]; then
                        message="$message ($model"
                        if [ -n "$capacity" ]; then
                            message="$message, $capacity"
                        fi
                        message="$message)"
                    fi

                    # Add runtime info
                    if [ -n "$power_on_hours" ]; then
                        message="$message, ${power_on_hours}h runtime"
                    fi
                    if [ -n "$power_cycles" ]; then
                        message="$message, ${power_cycles} power cycles"
                    fi

                    echo "$status SSD_Wearout_${device_name} wear_percent=$wear_percent;program_fails=${program_fail:-0};erase_fails=${erase_fail:-0};power_on_hours=${power_on_hours:-0};power_cycles=${power_cycles:-0} $state: $message"
                fi
            else
                # Can't read SMART data
                echo "1 SSD_Wearout_${device_name} wear_percent=0 WARNING: ${device_name}: Cannot read SMART data"
            fi
        fi
    done
}

check_ssd_wearout
