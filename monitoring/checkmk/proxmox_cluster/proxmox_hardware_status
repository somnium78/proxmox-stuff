#!/bin/bash
#
# Check_MK Local Check: Proxmox Hardware Status
# File: /usr/lib/check_mk_agent/local/proxmox_hardware_status
#
# Monitors hardware sensors (temperature, fans, disks)
# Author: somnium78
# Version: 1.1.0
# Date: 2025-09-05
#

check_hardware_status() {
    # Check if sensors command is available
    if ! command -v sensors >/dev/null 2>&1; then
        echo "1 Proxmox_Hardware_Status - WARNING: sensors command not found (install lm-sensors)"
        return
    fi

    # Get sensor data
    sensor_data=$(sensors 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo "2 Proxmox_Hardware_Status - CRITICAL: Failed to read sensors"
        return
    fi

    # Temperature analysis
    temp_sensors=0
    temp_max=0
    temp_critical=0
    temp_warning=0
    temp_issues=""

    # Parse temperature sensors
    while IFS= read -r line; do
        if echo "$line" | grep -qE "°C.*\("; then
            temp_sensors=$((temp_sensors + 1))

            # Extract current temperature
            current_temp=$(echo "$line" | grep -o "[0-9]*\.[0-9]*°C" | head -1 | sed 's/°C//' | cut -d. -f1)

            if [ -n "$current_temp" ] && [ "$current_temp" -gt 0 ]; then
                if [ "$current_temp" -gt "$temp_max" ]; then
                    temp_max=$current_temp
                fi

                # Check thresholds
                if [ "$current_temp" -gt 85 ]; then
                    temp_critical=$((temp_critical + 1))
                    sensor_name=$(echo "$line" | awk -F':' '{print $1}' | xargs)
                    temp_issues="$temp_issues,CRITICAL: $sensor_name ${current_temp}°C"
                elif [ "$current_temp" -gt 75 ]; then
                    temp_warning=$((temp_warning + 1))
                    sensor_name=$(echo "$line" | awk -F':' '{print $1}' | xargs)
                    temp_issues="$temp_issues,WARNING: $sensor_name ${current_temp}°C"
                fi
            fi
        fi
    done <<< "$sensor_data"

    # Fan analysis - improved logic
    fans_total=0
    fans_failed=0
    fans_warning=0
    min_fan_rpm=999999
    fan_issues=""

    # Parse fan sensors
    while IFS= read -r line; do
        if echo "$line" | grep -qE "fan.*RPM"; then
            fans_total=$((fans_total + 1))

            # Extract RPM value
            rpm=$(echo "$line" | grep -o "[0-9]*" | head -1)

            if [ -n "$rpm" ] && [ "$rpm" -gt 0 ]; then
                if [ "$rpm" -lt "$min_fan_rpm" ]; then
                    min_fan_rpm=$rpm
                fi

                # Only warn if RPM is suspiciously low (< 200 RPM for real fans)
                if [ "$rpm" -lt 200 ]; then
                    fan_name=$(echo "$line" | awk -F':' '{print $1}' | xargs)

                    # Check if this might be a virtual/unused fan channel
                    # Many motherboards report 0-10 RPM for unused channels
                    if [ "$rpm" -le 10 ]; then
                        # Likely unused channel - don't count as failed
                        fans_total=$((fans_total - 1))
                    else
                        fans_failed=$((fans_failed + 1))
                        fan_issues="$fan_issues,WARNING: $fan_name speed low: $rpm RPM"
                    fi
                elif [ "$rpm" -lt 500 ]; then
                    fans_warning=$((fans_warning + 1))
                    fan_name=$(echo "$line" | awk -F':' '{print $1}' | xargs)
                    fan_issues="$fan_issues,INFO: $fan_name speed low: $rpm RPM"
                fi
            else
                # 0 RPM - likely unused channel
                fans_total=$((fans_total - 1))
            fi
        fi
    done <<< "$sensor_data"

    # Set minimum fan RPM to 0 if no real fans found
    if [ "$min_fan_rpm" -eq 999999 ]; then
        min_fan_rpm=0
    fi

    # Disk analysis (basic SMART check)
    disks_total=0
    disks_failed=0
    disk_issues=""

    if command -v smartctl >/dev/null 2>&1; then
        # Find physical disks
        for disk in $(lsblk -d -n -o NAME,TYPE | grep disk | awk '{print "/dev/"$1}'); do
            if smartctl -i "$disk" 2>/dev/null | grep -q "SMART support is: Available"; then
                disks_total=$((disks_total + 1))

                health=$(smartctl -H "$disk" 2>/dev/null | grep "SMART overall-health" | awk '{print $NF}')
                if [ "$health" != "PASSED" ]; then
                    disks_failed=$((disks_failed + 1))
                    disk_name=$(basename "$disk")
                    disk_issues="$disk_issues,CRITICAL: $disk_name SMART failed"
                fi
            fi
        done
    fi

    # Determine overall status
    status=0
    state="OK"
    all_issues=""

    if [ $temp_critical -gt 0 ] || [ $disks_failed -gt 0 ]; then
        status=2
        state="CRITICAL"
    elif [ $temp_warning -gt 0 ] || [ $fans_failed -gt 0 ]; then
        status=1
        state="WARNING"
    fi

    # Combine all issues
    all_issues=$(echo "$temp_issues$fan_issues$disk_issues" | sed 's/^,//')

    echo "$status Proxmox_Hardware_Status temp_sensors=$temp_sensors;temp_max=${temp_max}C;temp_critical=$temp_critical;temp_warning=$temp_warning;fans_total=$fans_total;fans_failed=$fans_failed;fans_warning=$fans_warning;min_fan_rpm=$min_fan_rpm;disks_total=$disks_total;disks_failed=$disks_failed $state: Temps: $temp_sensors sensors (max: ${temp_max}°C), Fans: $fans_total active ($fans_failed failed), Disks: $disks_total ($disks_failed failed)${all_issues:+ - }$all_issues"
}

check_hardware_status
