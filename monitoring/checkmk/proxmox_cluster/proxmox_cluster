#!/bin/bash
#
# Check_MK Local Check: Proxmox Cluster Status (Fixed)
# File: /usr/lib/check_mk_agent/local/proxmox_cluster
#
# Monitors Proxmox cluster health and node status
# Author: somnium78
# Version: 1.1.0
# Date: 2025-08-30
#

check_proxmox_cluster() {
    # Check if pvecm command exists
    if ! command -v pvecm >/dev/null 2>&1; then
        echo "2 Proxmox_Cluster - CRITICAL: pvecm command not found"
        return
    fi

    # Get cluster status
    cluster_status=$(pvecm status 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "2 Proxmox_Cluster - CRITICAL: Failed to get cluster status"
        return
    fi

    # Extract cluster information
    cluster_name=$(echo "$cluster_status" | grep "Cluster name:" | awk '{print $3}' | tr -d '\r\n')

    # Fallback: try alternative methods for cluster name
    if [ -z "$cluster_name" ] || [ "$cluster_name" = "" ]; then
        # Try from cluster.conf
        if [ -f /etc/pve/cluster.conf ]; then
            cluster_name=$(grep -o 'cluster_name="[^"]*"' /etc/pve/cluster.conf 2>/dev/null | cut -d'"' -f2)
        fi

        # Try from corosync.conf
        if [ -z "$cluster_name" ] && [ -f /etc/pve/corosync.conf ]; then
            cluster_name=$(grep "cluster_name:" /etc/pve/corosync.conf 2>/dev/null | awk '{print $2}' | tr -d '\r\n')
        fi

        # Try from pvecm nodes
        if [ -z "$cluster_name" ]; then
            cluster_name=$(pvecm nodes 2>/dev/null | head -1 | grep "Membership information" | awk -F"'" '{print $2}')
        fi

        # Final fallback
        if [ -z "$cluster_name" ]; then
            cluster_name="unknown"
        fi
    fi

    # Extract numeric values
    quorate=$(echo "$cluster_status" | grep "Quorate:" | awk '{print $2}' | tr -d '\r\n')
    expected_votes=$(echo "$cluster_status" | grep "Expected votes:" | awk '{print $3}' | tr -d '\r\n')
    total_votes=$(echo "$cluster_status" | grep "Total votes:" | awk '{print $3}' | tr -d '\r\n')

    # Get node information
    nodes_info=$(pvecm nodes 2>/dev/null)
    total_nodes=$(echo "$nodes_info" | grep -c "^[[:space:]]*[0-9]")
    online_nodes=$(echo "$nodes_info" | grep -c "(local)")

    # Add online nodes from other entries
    online_count=$(echo "$nodes_info" | grep -v "(local)" | grep -c "^[[:space:]]*[0-9]")
    if [ "$online_count" -gt 0 ]; then
        online_nodes=$((online_nodes + online_count))
    fi

    # Convert quorate to numeric (1 for Yes, 0 for No)
    quorate_num=0
    if [ "$quorate" = "Yes" ]; then
        quorate_num=1
    fi

    # Validate numeric values
    if ! echo "$expected_votes" | grep -q '^[0-9]*$'; then expected_votes=0; fi
    if ! echo "$total_votes" | grep -q '^[0-9]*$'; then total_votes=0; fi
    if ! echo "$total_nodes" | grep -q '^[0-9]*$'; then total_nodes=0; fi
    if ! echo "$online_nodes" | grep -q '^[0-9]*$'; then online_nodes=0; fi

    # Determine status
    if [ "$quorate_num" -eq 0 ]; then
        status=2
        state="CRITICAL"
    elif [ "$online_nodes" -lt "$total_nodes" ]; then
        status=1
        state="WARNING"
    else
        status=0
        state="OK"
    fi

    # Format quorate for display
    quorate_display="Yes"
    if [ "$quorate_num" -eq 0 ]; then
        quorate_display="No"
    fi

    echo "$status Proxmox_Cluster total_nodes=$total_nodes;online_nodes=$online_nodes;quorate=$quorate_num;expected_votes=$expected_votes;total_votes=$total_votes $state: Cluster '$cluster_name' ($online_nodes/$total_nodes nodes online, quorate: $quorate_display)"
}

check_proxmox_cluster
