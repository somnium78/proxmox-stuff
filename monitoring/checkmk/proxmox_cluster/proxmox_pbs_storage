#!/bin/bash
#
# Check_MK Local Check: Proxmox PBS Storage
# File: /usr/lib/check_mk_agent/local/proxmox_pbs_storage
#
# Monitors Proxmox Backup Server storage connections
# Author: somnium78
# Version: 1.2.0
# Date: 2025-09-05
#

check_pbs_storage() {
    # Check if pvesm command is available
    if ! command -v pvesm >/dev/null 2>&1; then
        echo "2 Proxmox_PBS_Storage - CRITICAL: pvesm command not found"
        return
    fi

    # Get all storage configurations and filter for PBS
    all_storages=$(pvesm status 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo "2 Proxmox_PBS_Storage - CRITICAL: Failed to get storage status"
        return
    fi

    # Extract PBS storages
    pbs_storages=$(echo "$all_storages" | grep -E "pbs.*active|pbs.*inactive" | awk '{print $1}')

    if [ -z "$pbs_storages" ]; then
        echo "0 Proxmox_PBS_Storage total=0;active=0;inactive=0;servers_reachable=0;servers_total=0;auth_issues=0;connection_issues=0 OK: No PBS storages configured"
        return
    fi

    total=0
    active=0
    inactive=0
    auth_issues=0
    connection_issues=0
    unique_servers=""
    detailed_issues=""

    # Process each PBS storage
    while IFS= read -r storage_name; do
        if [ -n "$storage_name" ]; then
            total=$((total + 1))

            # Check if storage is marked as active in pvesm status
            storage_line=$(echo "$all_storages" | grep "^$storage_name ")

            if echo "$storage_line" | grep -q "active"; then
                active=$((active + 1))

                # Try to get more detailed info about the storage
                storage_config=$(pvesm config "$storage_name" 2>/dev/null)
                if [ -n "$storage_config" ]; then
                    # Extract server from config
                    server=$(echo "$storage_config" | grep -E "^\s*server" | awk '{print $2}' | head -1)
                    if [ -n "$server" ] && ! echo "$unique_servers" | grep -q "$server"; then
                        unique_servers="$unique_servers $server"
                    fi
                fi

                # Test actual PBS functionality with a simple list command
                list_test=$(pvesm list "$storage_name" 2>&1)
                list_result=$?

                if [ $list_result -ne 0 ]; then
                    if echo "$list_test" | grep -qiE "auth|login|credential|permission|401|403"; then
                        auth_issues=$((auth_issues + 1))
                        detailed_issues="$detailed_issues,$storage_name: auth issue"
                    elif echo "$list_test" | grep -qiE "connect|network|timeout|unreachable|500|502|503"; then
                        connection_issues=$((connection_issues + 1))
                        detailed_issues="$detailed_issues,$storage_name: connection issue"
                    else
                        # Other issues - might still be functional
                        detailed_issues="$detailed_issues,$storage_name: minor issue"
                    fi
                fi
            else
                inactive=$((inactive + 1))
                detailed_issues="$detailed_issues,$storage_name: inactive"
            fi
        fi
    done <<< "$pbs_storages"

    # Count unique servers and test basic connectivity
    servers_total=0
    servers_reachable=0

    for server in $unique_servers; do
        if [ -n "$server" ]; then
            servers_total=$((servers_total + 1))

            # Test connectivity (ping with short timeout)
            if ping -c 1 -W 1 "$server" >/dev/null 2>&1; then
                servers_reachable=$((servers_reachable + 1))
            fi
        fi
    done

    # If no servers extracted from config, assume local or working setup
    if [ $servers_total -eq 0 ] && [ $active -gt 0 ]; then
        servers_total=1
        servers_reachable=1
    fi

    # Determine status - be more lenient
    status=0
    state="OK"

    # Only critical if ALL storages are inactive or have major issues
    if [ $total -gt 0 ] && [ $active -eq 0 ]; then
        status=2
        state="CRITICAL"
    # Warning if we have auth issues or significant connection problems
    elif [ $auth_issues -gt 0 ] || [ $connection_issues -gt $((active / 2)) ]; then
        status=1
        state="WARNING"
    # Also warning if more than half are inactive
    elif [ $inactive -gt $((total / 2)) ] && [ $total -gt 1 ]; then
        status=1
        state="WARNING"
    fi

    # Create message
    message="$total PBS storage(s) ($active active"
    if [ $inactive -gt 0 ]; then
        message="$message, $inactive inactive"
    fi
    message="$message)"

    if [ $servers_total -gt 0 ]; then
        message="$message, $servers_reachable/$servers_total server(s) reachable"
    fi

    if [ $auth_issues -gt 0 ]; then
        message="$message, $auth_issues auth issues"
    fi
    if [ $connection_issues -gt 0 ]; then
        message="$message, $connection_issues connection issues"
    fi

    # Add details if there are issues and we're not OK
    if [ "$status" -ne 0 ] && [ -n "$detailed_issues" ]; then
        details=$(echo "$detailed_issues" | sed 's/^,//')
        message="$message - $details"
    fi

    echo "$status Proxmox_PBS_Storage total=$total;active=$active;inactive=$inactive;servers_reachable=$servers_reachable;servers_total=$servers_total;auth_issues=$auth_issues;connection_issues=$connection_issues $state: $message"
}

check_pbs_storage

