#!/bin/bash
#
# Check_MK Local Check: ZFS Pool Capacity (Performance-focused)
# File: /usr/lib/check_mk_agent/local/zfs_pool_capacity
#
# Monitors ZFS pool capacity with performance thresholds (80%/90%)
# Author: somnium78
# Version: 1.1.0
# Date: 2025-09-05
#

check_zfs_pool_capacity() {
    if ! command -v zpool >/dev/null 2>&1; then
        echo "2 ZFS_Pool_Capacity - CRITICAL: zpool command not found"
        return
    fi

    # Get pool list with capacity information
    pool_list=$(zpool list -H -o name,size,alloc,free,cap 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo "2 ZFS_Pool_Capacity - CRITICAL: Failed to get ZFS pool information"
        return
    fi

    if [ -z "$pool_list" ]; then
        echo "1 ZFS_Pool_Capacity - WARNING: No ZFS pools found"
        return
    fi

    total_pools=0
    performance_warning_pools=0
    critical_pools=0
    max_usage=0
    pool_details=""
    critical_pool_names=""
    warning_pool_names=""

    # Process each pool
    while IFS=$'\t' read -r name size alloc free cap; do
        if [ -n "$name" ] && [ -n "$cap" ]; then
            total_pools=$((total_pools + 1))

            # Extract percentage (remove % sign)
            usage_percent=$(echo "$cap" | sed 's/%//')

            # Track maximum usage
            if [ "$usage_percent" -gt "$max_usage" ]; then
                max_usage=$usage_percent
            fi

            # Check performance thresholds
            if [ "$usage_percent" -ge 90 ]; then
                critical_pools=$((critical_pools + 1))
                critical_pool_names="$critical_pool_names $name"
                pool_details="$pool_details,CRITICAL: $name ${usage_percent}% (${alloc}/${size})"
            elif [ "$usage_percent" -ge 80 ]; then
                performance_warning_pools=$((performance_warning_pools + 1))
                warning_pool_names="$warning_pool_names $name"
                pool_details="$pool_details,WARNING: $name ${usage_percent}% (${alloc}/${size})"
            fi
        fi
    done <<< "$pool_list"

    # Calculate total capacity using awk for floating point
    total_size_gb=0
    total_alloc_gb=0

    while IFS=$'\t' read -r name size alloc free cap; do
        if [ -n "$size" ] && [ -n "$alloc" ]; then
            # Convert sizes to GB using awk
            size_gb=$(echo "$size" | awk '
                /T$/ { gsub(/T/, ""); print $1 * 1024; next }
                /G$/ { gsub(/G/, ""); print $1; next }
                /M$/ { gsub(/M/, ""); print $1 / 1024; next }
                /K$/ { gsub(/K/, ""); print $1 / 1048576; next }
                { print $1 / 1073741824 }
            ')

            alloc_gb=$(echo "$alloc" | awk '
                /T$/ { gsub(/T/, ""); print $1 * 1024; next }
                /G$/ { gsub(/G/, ""); print $1; next }
                /M$/ { gsub(/M/, ""); print $1 / 1024; next }
                /K$/ { gsub(/K/, ""); print $1 / 1048576; next }
                { print $1 / 1073741824 }
            ')

            # Add to totals (convert to integer)
            total_size_gb=$(awk "BEGIN {printf \"%.0f\", $total_size_gb + $size_gb}")
            total_alloc_gb=$(awk "BEGIN {printf \"%.0f\", $total_alloc_gb + $alloc_gb}")
        fi
    done <<< "$pool_list"

    # Calculate overall usage percentage
    overall_usage=0
    if [ "$total_size_gb" -gt 0 ]; then
        overall_usage=$(awk "BEGIN {printf \"%.0f\", $total_alloc_gb * 100 / $total_size_gb}")
    fi

    # Determine status
    if [ $critical_pools -gt 0 ]; then
        status=2
        state="CRITICAL"
    elif [ $performance_warning_pools -gt 0 ]; then
        status=1
        state="WARNING"
    else
        status=0
        state="OK"
    fi

    # Build message
    message="$total_pools ZFS pools (max usage: ${max_usage}%, overall: ${overall_usage}%)"
    if [ $performance_warning_pools -gt 0 ]; then
        message="$message, $performance_warning_pools pools >80%:$warning_pool_names"
    fi
    if [ $critical_pools -gt 0 ]; then
        message="$message, $critical_pools pools >90%:$critical_pool_names"
    fi

    # Add performance warning
    if [ $performance_warning_pools -gt 0 ] || [ $critical_pools -gt 0 ]; then
        message="$message - Performance impact expected"
    fi

    # Add detailed pool information
    if [ -n "$pool_details" ]; then
        details=$(echo "$pool_details" | sed 's/^,//')
        message="$message ($details)"
    fi

    echo "$status ZFS_Pool_Capacity total_pools=$total_pools;warning_pools=$performance_warning_pools;critical_pools=$critical_pools;max_usage=$max_usage;overall_usage=$overall_usage;total_size_gb=$total_size_gb;total_alloc_gb=$total_alloc_gb $state: $message"
}

check_zfs_pool_capacity
