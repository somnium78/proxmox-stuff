#!/bin/bash
#
# Check_MK Local Check: ZFS Capacity (Corrected)
# File: /usr/lib/check_mk_agent/local/zfs_capacity
#
# Monitors ZFS filesystem capacity and usage with correct pool-aware calculations
# Author: somnium78
# Version: 1.4.0
# Date: 2025-08-30
#

check_zfs_capacity() {
    if ! command -v zfs >/dev/null 2>&1; then
        echo "2 ZFS_Capacity - CRITICAL: zfs command not found"
        return
    fi

    # Get filesystem usage
    zfs_usage=$(zfs list -H -o name,used,available,usedsnap,usedbydataset -t filesystem 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "2 ZFS_Capacity - CRITICAL: Failed to query ZFS filesystems"
        return
    fi

    total_filesystems=$(echo "$zfs_usage" | wc -l)

    if [ $total_filesystems -eq 0 ]; then
        echo "1 ZFS_Capacity - WARNING: No ZFS filesystems found"
        return
    fi

    # Initialize counters
    critical_fs=0
    warning_fs=0
    total_used_gb=0
    total_available_gb=0
    max_usage_percent=0

    # Track pools to avoid double-counting available space
    declare -A pool_available
    declare -A pool_used

    # Function to convert ZFS sizes to GB
    convert_to_gb() {
        local size="$1"
        local gb=0

        if echo "$size" | grep -q "T$"; then
            gb=$(echo "$size" | sed 's/T$//' | awk '{printf "%.0f", $1 * 1024}')
        elif echo "$size" | grep -q "G$"; then
            gb=$(echo "$size" | sed 's/G$//' | awk '{printf "%.0f", $1}')
        elif echo "$size" | grep -q "M$"; then
            gb=$(echo "$size" | sed 's/M$//' | awk '{printf "%.0f", $1 / 1024}')
        elif echo "$size" | grep -q "K$"; then
            gb=$(echo "$size" | sed 's/K$//' | awk '{printf "%.0f", $1 / 1048576}')
        else
            # Assume bytes
            gb=$(echo "$size" | awk '{printf "%.0f", $1 / 1073741824}')
        fi

        echo "$gb"
    }

    # First pass: identify top-level pools and their capacity
    while IFS=$'\t' read -r name used available usedsnap usedbydataset; do
        if [ -n "$used" ] && [ -n "$available" ]; then
            # Get pool name (first part before /)
            pool_name=$(echo "$name" | cut -d'/' -f1)

            # Convert to GB
            used_gb=$(convert_to_gb "$used")
            avail_gb=$(convert_to_gb "$available")

            # Validate numeric values
            if ! echo "$used_gb" | grep -q '^[0-9]*$'; then used_gb=0; fi
            if ! echo "$avail_gb" | grep -q '^[0-9]*$'; then avail_gb=0; fi

            # For pool capacity calculation, only count top-level pools or unique available space
            if [ "$name" = "$pool_name" ] || [ -z "${pool_available[$pool_name]}" ]; then
                pool_available[$pool_name]=$avail_gb
                if [ -z "${pool_used[$pool_name]}" ]; then
                    pool_used[$pool_name]=0
                fi
            fi

            # Add used space for this filesystem
            pool_used[$pool_name]=$((${pool_used[$pool_name]} + used_gb))
        fi
    done <<< "$zfs_usage"

    # Second pass: calculate individual filesystem usage percentages
    while IFS=$'\t' read -r name used available usedsnap usedbydataset; do
        if [ -n "$used" ] && [ -n "$available" ]; then
            # Convert to GB
            used_gb=$(convert_to_gb "$used")
            avail_gb=$(convert_to_gb "$available")

            # Validate numeric values
            if ! echo "$used_gb" | grep -q '^[0-9]*$'; then used_gb=0; fi
            if ! echo "$avail_gb" | grep -q '^[0-9]*$'; then avail_gb=0; fi

            if [ "$avail_gb" -gt 0 ] || [ "$used_gb" -gt 0 ]; then
                total_gb=$((used_gb + avail_gb))

                if [ "$total_gb" -gt 0 ]; then
                    usage_percent=$((used_gb * 100 / total_gb))

                    # Track maximum usage
                    if [ "$usage_percent" -gt "$max_usage_percent" ]; then
                        max_usage_percent=$usage_percent
                    fi

                    # Count filesystems by usage level
                    if [ $usage_percent -gt 90 ]; then
                        critical_fs=$((critical_fs + 1))
                    elif [ $usage_percent -gt 80 ]; then
                        warning_fs=$((warning_fs + 1))
                    fi
                fi
            fi
        fi
    done <<< "$zfs_usage"

    # Calculate totals from pools
    for pool in "${!pool_available[@]}"; do
        total_available_gb=$((total_available_gb + ${pool_available[$pool]}))
        total_used_gb=$((total_used_gb + ${pool_used[$pool]}))
    done

    # Calculate overall usage percentage
    total_capacity_gb=$((total_used_gb + total_available_gb))
    overall_usage_percent=0
    if [ "$total_capacity_gb" -gt 0 ]; then
        overall_usage_percent=$((total_used_gb * 100 / total_capacity_gb))
    fi

    # Determine status
    if [ $critical_fs -gt 0 ]; then
        status=2
        state="CRITICAL"
    elif [ $warning_fs -gt 0 ]; then
        status=1
        state="WARNING"
    else
        status=0
        state="OK"
    fi

    echo "$status ZFS_Capacity total=$total_filesystems;warning=$warning_fs;critical=$critical_fs;used_gb=$total_used_gb;available_gb=$total_available_gb;capacity_gb=$total_capacity_gb;usage_percent=$overall_usage_percent;max_usage_percent=$max_usage_percent $state: $total_filesystems filesystems (${total_used_gb}GB used/${total_capacity_gb}GB total=${overall_usage_percent}%, $warning_fs >80%, $critical_fs >90%, max: ${max_usage_percent}%)"
}

check_zfs_capacity
